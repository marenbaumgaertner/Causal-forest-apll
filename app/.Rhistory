br(),
br(),
textOutput("explanation")
),
# Last Panel
tabPanel("About", # panel name
br(),
br(), # space
textOutput("about")),
# colors
setSliderColor(c("#2F444F"),1) # #6495ed HEX code f√ºr cornflowerblue
))
server <- function(input, output) {
# define all data within reactive function as they vary in tau
sliderValues <- reactive({
# Set parameters
n = 200
p = 2
grid <- input$grid
# Draw sample
x = matrix(runif(n*p,-pi,pi),ncol=p)
e = function(x){pnorm(sin(x))}
m0 = function(x){sin(x)}
tau = function(x){0 + 1*(x>-0.5*pi)}
m1 = function(x){m0(x) + tau(x)}
w = rbinom(n,1,e(x)) # treatment status
y = m0(x[,1]) + w*tau(x[,1]) + rnorm(n,0,1/10) # outcome
cf = causal_forest(x, y, w,tune.parameters = "all")
# Get residuals
res_y = as.matrix(y - cf$Y.hat)
res_w = as.matrix(w - cf$W.hat)
gridx = as.matrix(cbind(grid,matrix(0,1,p-1)))
#gridx = cbind(-3,matrix(0,1,p-1)) #test
grid_hat = predict(cf, newdata = gridx)$predictions
alpha = get_forest_weights(cf, newdata = gridx)[1,]
rorr = lm(res_y ~ res_w, weights = alpha)
# residual on residual regression
rorr = lm(res_y ~ res_w,weights = alpha)
# data
data_rorr <- as.data.frame(data.frame(res_w,res_y,alpha=alpha,x=x,
constant=rep(rorr$coefficients[1],n),
slope=rep(rorr$coefficients[2],n))
)
})
output$scatterPlot <- renderPlot({
ggplot(aes(res_w, res_y, colour = x.1), data=sliderValues()) +
geom_point(aes(size = alpha), alpha = 0.5, show.legend = TRUE) +
scale_colour_gradient(low = "#9A5E73", high = "#3C5D8A", name = expression(X[1])) +
geom_abline(mapping=aes(slope=slope, intercept=constant)) +
#annotate("text", x = -0.25, y = 1,
#         label = paste0("ùúè(",toString(grid),") = slope of line = ",
#              toString(round(rorr$coefficients[2],2)))) +
theme_bw() +
ylim(-1.2, 1.2) +
xlim(-1,1) +
ylab(expression(res[y])) +
xlab(expression(res[w])) +
labs(size = expression(alpha))
}, height = 500, width = 900)
output$about <- renderText({
"This app has been created as a group project by Maren Baumg√§rtner, Sophia Herrmann, Kevin Kopp, Alexandros Parginos D√∂s and Stella Rotter for the course \" DS407 Causal Machine Learing\"."
})
output$explanation <- renderText({
"Explanations, explanations, explanations"
})
}
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
defaultW <- getOption("warn")
options(warn = -1)
library(grf)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(partykit)
library(patchwork)
library(causalTree)
library(gganimate)
options(warn = defaultW)
library(shinythemes)
library(shinyWidgets)
set.seed(1234)
ui <- fluidPage(theme = shinytheme("sandstone"),
navbarPage( # Create different panel with tabsetPanel(
"Causal Forest Fun",
# First Panel
tabPanel("Scatterplot",
br(),
"Welcome to  bla.
This page allows you to engage with causal forests.",
br(),
br(),
sidebarPanel(
br(),
br(),
sliderInput(
"grid",
withMathJax(helpText("Choose a value for ùúè:")),
min = -3,
max = 0,
value = -2,
step = 0.1,
width = "90%"
),
submitButton(" Apply changes!", icon = icon("tree"))#, style = "color: #6495ed; background-color: #6495ed; border-color: #6495ed")
),
mainPanel(
plotOutput("scatterPlot")
),
cellWidths = c("40%", "60%")
),
tabPanel("Theoretical Background", "Here you find some theoretical background on causal forests",
br(),
br(),
textOutput("explanation")
),
# Last Panel
tabPanel("About", # panel name
br(),
br(), # space
textOutput("about")),
# colors
setSliderColor(c("#2F444F"),1) # #6495ed HEX code f√ºr cornflowerblue
))
server <- function(input, output) {
# define all data within reactive function as they vary in tau
n = 200
p = 2
# Draw sample
x = matrix(runif(n*p,-pi,pi),ncol=p)
e = function(x){pnorm(sin(x))}
m0 = function(x){sin(x)}
tau = function(x){0 + 1*(x>-0.5*pi)}
m1 = function(x){m0(x) + tau(x)}
w = rbinom(n,1,e(x)) # treatment status
y = m0(x[,1]) + w*tau(x[,1]) + rnorm(n,0,1/10) # outcome
cf = causal_forest(x, y, w,tune.parameters = "all")
# Get residuals
res_y = as.matrix(y - cf$Y.hat)
res_w = as.matrix(w - cf$W.hat)
sliderValues <- reactive({
# Set parameters
grid <- input$grid
gridx = as.matrix(cbind(grid,matrix(0,1,p-1)))
#gridx = cbind(-3,matrix(0,1,p-1)) #test
grid_hat = predict(cf, newdata = gridx)$predictions
alpha = get_forest_weights(cf, newdata = gridx)[1,]
rorr = lm(res_y ~ res_w, weights = alpha)
# residual on residual regression
rorr = lm(res_y ~ res_w,weights = alpha)
# data
data_rorr <- as.data.frame(data.frame(res_w,res_y,alpha=alpha,x=x,
constant=rep(rorr$coefficients[1],n),
slope=rep(rorr$coefficients[2],n))
)
})
output$scatterPlot <- renderPlot({
ggplot(aes(res_w, res_y, colour = x.1), data=sliderValues()) +
geom_point(aes(size = alpha), alpha = 0.5, show.legend = TRUE) +
scale_colour_gradient(low = "#9A5E73", high = "#3C5D8A", name = expression(X[1])) +
geom_abline(mapping=aes(slope=slope, intercept=constant)) +
#annotate("text", x = -0.25, y = 1,
#         label = paste0("ùúè(",toString(grid),") = slope of line = ",
#              toString(round(rorr$coefficients[2],2)))) +
theme_bw() +
ylim(-1.2, 1.2) +
xlim(-1,1) +
ylab(expression(res[y])) +
xlab(expression(res[w])) +
labs(size = expression(alpha))
}, height = 500, width = 900)
output$about <- renderText({
"This app has been created as a group project by Maren Baumg√§rtner, Sophia Herrmann, Kevin Kopp, Alexandros Parginos D√∂s and Stella Rotter for the course \" DS407 Causal Machine Learing\"."
})
output$explanation <- renderText({
"Explanations, explanations, explanations"
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/m-bau/Downloads/cf_final (2)/cf_final')
list_of_tau <- list("0 + 1*(x>-0.5*pi)",
"0 + exp(x)",
"0.3*x")
list_of_e <- list("pnorm(sin(x))", #
"0.5", # 50:50
"ifelse(x < -1, 0.1,ifelse(x >= -1 & x < 1, 0.5,ifelse(x >= 1 & x < pi, 0.9, 0)))" # stepfunction
)
n = 200 # n variieren 200/2000
p = 2
# Draw sample
error <- rnorm(n,0,1/10)
x = matrix(runif(n*p,-pi,pi),ncol=p)
m0 = function(x){sin(x)}
e = function(x){eval(parse(text = list_of_e[[1]]))}
tau <- function(x){eval(parse(text = list_of_tau[[1]]))}
# compute output under treatment
m1 = function(x){m0(x) + tau(x)}
set.seed(42);w = rbinom(n,1,e(x)) # treatment status
y = m0(x[,1]) + w*tau(x[,1]) + error # outcome
cf <- readRDS("cf_sinus.RData")
cf <- cf[[1]]
# Get residuals
res_y = as.matrix(y - cf$Y.hat)
View(cf)
View(cf)
cf_1_sinus = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_1_sinus = causal_forest(x, y, w,tune.parameters = "all")
cf <- cf_1_sinus
rm(cf_1_sinus)
# Get residuals
res_y = as.matrix(y - cf$Y.hat)
res_w = as.matrix(w - cf$W.hat)
grid = seq(-3,0,0.5)
gridx = cbind(grid,matrix(0,length(grid),p-1))
grid_hat = predict(cf,newdata = gridx)$predictions
alpha = get_forest_weights(cf,newdata = gridx)
rorr = lm(res_y ~ res_w,weights = alpha[1,])
data_rorr_m <- data.frame(res_w,res_y,alpha=alpha[1,],x=x)
View(data_rorr_m)
View(data_rorr_m)
# code von Michael
grid = seq(-3,0,0.5)
gridx = cbind(grid,matrix(0,length(grid),p-1))
grid_hat = predict(cf,newdata = gridx)$predictions
alpha = get_forest_weights(cf,newdata = gridx)
alpha[1,]
rorr = lm(res_y ~ res_w,weights = alpha[2,])
alpha[2,]
runApp('C:/Users/m-bau/Downloads/cf_final (2)/cf_final')
which(grid_seq == 3)
grid_seq <- seq(-3,3,0.25) # sequence
which(grid_seq == 3)
runApp('C:/Users/m-bau/Downloads/cf_final (2)/cf_final')
runApp('C:/Users/m-bau/Downloads/cf_final (2)/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app')
cf <- readRDS("cf_sinus.RData")
cf <- cf[[1]]
# pick chosen e from list
e = function(x){eval(parse(text = list_of_e[[1]]))}
# pick chosen DGP from list
tau <- function(x){eval(parse(text = list_of_tau[[1]]))}
n = 200 # n variieren 200/2000
p = 2
# Draw sample
error <- rnorm(n,0,1/10)
x = matrix(runif(n*p,-pi,pi),ncol=p)
m0 = function(x){sin(x)}
library(shiny)
defaultW <- getOption("warn")
options(warn = -1)
library(grf)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(partykit)
library(patchwork)
library(causalTree)
library(gganimate)
options(warn = defaultW)
library(shinythemes)
library(shinyWidgets)
set.seed(420)
# compute output under treatment
m1 = function(x){m0(x) + tau(x)}
set.seed(42);w = rbinom(n,1,e(x)) # treatment status
y = m0(x[,1]) + w*tau(x[,1]) + error # outcome
# compute output under treatment
m1 = function(x){m0(x) + tau(x)}
set.seed(42);w = rbinom(n,1,e(x)) # treatment status
View(e)
list_of_tau <- list("0 + 1*(x>-0.5*pi)",
"0 + exp(x)",
"0.3*x")
list_of_e <- list("pnorm(sin(x))", #
"0.5", # 50:50
"ifelse(x < -1, 0.1,ifelse(x >= -1 & x < 1, 0.5,ifelse(x >= 1 & x < pi, 0.9, 0)))" # stepfunction
)
set.seed(42);w = rbinom(n,1,e(x)) # treatment status
y = m0(x[,1]) + w*tau(x[,1]) + error # outcome
res_y = as.matrix(y - cf$Y.hat)
res_w = as.matrix(w - cf$W.hat)
setwd("C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app")
cf <- readRDS("cf_sinus.RData")
cf <- cf[[1]]
# Get residuals
res_y = as.matrix(y - cf$Y.hat)
res_w = as.matrix(w - cf$W.hat)
grid <- -3
grid_seq <- seq(-3,3,0.25) # sequence
gridx = as.matrix(cbind(grid_seq,matrix(0,length(grid_seq),p-1)))
alpha = get_forest_weights(cf, newdata = gridx)[which(grid_seq == 3),]
# residual on residual regression
rorr = lm(res_y ~ res_w,weights = alpha)
summary(rorr)
alpha = get_forest_weights(cf, newdata = gridx)[which(grid_seq == -3),]
# residual on residual regression
rorr = lm(res_y ~ res_w,weights = alpha)
summary(rorr)
alpha = get_forest_weights(cf, newdata = gridx)
dim(alpha)
which(grid_seq == -3)
View(alpha)
View(alpha)
alpha[1:5,]
alpha[,1:5]
gridx = as.matrix(cbind(grid,matrix(0,1,p-1)))
grid_hat = predict(cf, newdata = gridx)$predictions
# Run same over grid an see how weights move
grid = seq(-3,0,0.5)
gridx = cbind(grid,matrix(0,length(grid),p-1))
grid_hat = predict(cf,newdata = gridx)$predictions
View(gridx)
gridx = as.matrix(cbind(grid,matrix(0,1,p-1)))
grid_hat = predict(cf,newdata = gridx)$predictions
coef(rorr)
# Set parameters
grid <- -3
gridx = as.matrix(cbind(grid,matrix(0,1,p-1)))
grid_hat = predict(cf,newdata = gridx)$predictions
alpha = get_forest_weights(cf, newdata = gridx)[1,]
rorr = lm(res_y ~ res_w, weights = alpha)
coef(rorr)
testx = matrix(c(-3,rep(0,p-1)),nrow=1)
testx==gridx
library(shiny)
defaultW <- getOption("warn")
options(warn = -1)
library(grf)
library(tidyverse)
library(rpart)
library(rpart.plot)
library(partykit)
library(patchwork)
library(causalTree)
library(gganimate)
options(warn = defaultW)
library(shinythemes)
library(shinyWidgets)
set.seed(1234)
setwd("C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app_new")
list_of_tau <- list("0 + 1*(x>-0.5*pi)",
"0 + exp(x)",
"0.3*x")
list_of_e <- list("pnorm(sin(x))", #
"0.5", # 50:50
"ifelse(x < -1, 0.1,
ifelse(x >= -1 & x < 1, 0.5,
ifelse(x >= 1 & x < pi, 0.9, 0)))" # stepfunction
)
n = 200 # n variieren 200/2000
p = 2
# Draw sample
x = matrix(runif(n*p,-pi,pi),ncol=p)
write.csv(x, "x.csv")
rm(x)
# Draw sample
#x = matrix(runif(n*p,-pi,pi),ncol=p)
#write.csv(x, "x.csv")
x = read.csv("x.csv")
# Draw sample
#x = matrix(runif(n*p,-pi,pi),ncol=p)
#write.csv(x, "x.csv")
x = read.csv("x.csv") %>% select(-X)
e <- function(x){eval(parse(text = list_of_e[[1]]))}
# Stepfunction
m0 = function(x){sin(x)}
tau1 <- function(x){eval(parse(text = list_of_tau[[1]]))}
tau2 <- function(x){eval(parse(text = list_of_tau[[2]]))}
tau3 <- function(x){eval(parse(text = list_of_tau[[3]]))}
m1_1 = function(x){m0(x) + tau1(x)}
m1_2 = function(x){m0(x) + tau2(x)}
m1_3 = function(x){m0(x) + tau3(x)}
w = rbinom(n,1,e(x)) # treatment status
w = rbinom(n,1,e(x)) # treatment status
# Draw sample
#
x = matrix(runif(n*p,-pi,pi),ncol=p)
w = rbinom(n,1,e(x)) # treatment status
View(x)
#write.csv(x, "x.csv")
x = read.csv("x.csv") %>% select(-X) %>% as.matrix()
w = rbinom(n,1,e(x)) # treatment status
#write.csv(x, "x.csv")
x = read.csv("x.csv") %>% select(-X) %>% as.matrix()
w = rbinom(n,1,e(x)) # treatment status
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
cf_1_sinus = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_sinus = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_sinus = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_sinus <- list(cf_1_sinus, cf_2_sinus, cf_3_sinus)
saveRDS(cf_sinus, file="cf_sinus.RData")
e <- function(x){eval(parse(text = list_of_e[[2]]))}
w = rbinom(n,1,e(x)) # treatment status
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
cf_1_balanced = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_balanced = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_balanced = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_balanced <- list(cf_1_balanced,
cf_2_balanced,
cf_3_balanced)
saveRDS(cf_balanced, file="cf_balanced.RData")
e <- function(x){eval(parse(text = list_of_e[[3]]))}
w = rbinom(n,1,e(x)) # treatment status
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
cf_1_step = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_step = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_step = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_step<- list(cf_1_step,
cf_2_step,
cf_3_step)
saveRDS(cf_step, file="cf_step.RData")
runApp()
runApp()
setwd("C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app_new")
runApp()
getwd()
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
w <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
w[,3] = rbinom(n,1,e(x)) # treatment status
e <- function(x){eval(parse(text = list_of_e[[2]]))}
w[,2] = rbinom(n,1,e(x)) # treatment status
e <- function(x){eval(parse(text = list_of_e[[1]]))}
w[,1] = rbinom(n,1,e(x)) # treatment status
write.csv(w, "w.csv")
w = read.csv("x.csv") %>% select(-X) %>% as.matrix()
w = read.csv("w.csv") %>% select(-X) %>% as.matrix()
View(w)
View(w)
w_all = read.csv("w.csv") %>% select(-X) %>% as.matrix()
w <- w_al[,1]
w <- w_all[,1]
tau1 <- function(x){eval(parse(text = list_of_tau[[1]]))}
tau2 <- function(x){eval(parse(text = list_of_tau[[2]]))}
tau3 <- function(x){eval(parse(text = list_of_tau[[3]]))}
m1_1 = function(x){m0(x) + tau1(x)}
m1_2 = function(x){m0(x) + tau2(x)}
m1_3 = function(x){m0(x) + tau3(x)}
w <- w_all[,1]
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
# for e = sinus
cf_1_sinus = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_sinus = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_sinus = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_sinus <- list(cf_1_sinus, cf_2_sinus, cf_3_sinus)
saveRDS(cf_sinus, file="cf_sinus.RData")
w <- w_all[,2]
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
# for e = 0.5x
cf_1_balanced = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_balanced = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_balanced = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_balanced <- list(cf_1_balanced,
cf_2_balanced,
cf_3_balanced)
saveRDS(cf_balanced, file="cf_balanced.RData")
e <- function(x){eval(parse(text = list_of_e[[3]]))}
w <- w_all[,3]
y <- as.data.frame(matrix(NA, nrow = n, ncol = 3))
y[,1] = m0(x[,1]) + w*tau1(x[,1]) + rnorm(n,0,1/10) # outcome
y[,2] = m0(x[,1]) + w*tau2(x[,1]) + rnorm(n,0,1/10) # outcome
y[,3] = m0(x[,1]) + w*tau3(x[,1]) + rnorm(n,0,1/10) # outcome
# for e = 0.5x
cf_1_step = causal_forest(x, y[,1], w,tune.parameters = "all")
cf_2_step = causal_forest(x, y[,2], w,tune.parameters = "all")
cf_3_step = causal_forest(x, y[,3], w,tune.parameters = "all")
cf_step<- list(cf_1_step,
cf_2_step,
cf_3_step)
saveRDS(cf_step, file="cf_step.RData")
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
shiny::runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
runApp('C:/Users/m-bau/Dokumente/Studium/Master/3. Semester/Causal Machine Learning/group presentation/app/final/cf_final/app')
